import { NextRequest, NextResponse } from 'next/server'
import { PrismaClient } from '@prisma/client'

const prisma = new PrismaClient()

export async function GET(request: NextRequest) {
  try {
    const { searchParams } = new URL(request.url)
    const lat = searchParams.get('lat')
    const lng = searchParams.get('lng')

    if (!lat || !lng) {
      return NextResponse.json(
        { error: 'Latitude ve longitude gerekli' },
        { status: 400 }
      )
    }

    const latitude = parseFloat(lat)
    const longitude = parseFloat(lng)

    // Önce veritabanından en yakın ilçeyi bul
    let closestDistrict = null
    let closestProvince = null
    
    try {
      // Haversine formülü ile en yakın ilçeyi bulma
      const nearbyDistricts = await prisma.$queryRaw`
        SELECT 
          d.id,
          d.name as district_name,
          d.latitude as district_lat,
          d.longitude as district_lng,
          p.id as province_id,
          p.name as province_name,
          (
            6371 * acos(
              cos(radians(${latitude})) * 
              cos(radians(CAST(d.latitude AS DECIMAL(10,8)))) * 
              cos(radians(CAST(d.longitude AS DECIMAL(11,8))) - radians(${longitude})) + 
              sin(radians(${latitude})) * 
              sin(radians(CAST(d.latitude AS DECIMAL(10,8))))
            )
          ) AS distance
        FROM District d
        INNER JOIN Province p ON d.province_id = p.id
        WHERE d.latitude IS NOT NULL AND d.longitude IS NOT NULL
        ORDER BY distance
        LIMIT 5
      `
      
      if (nearbyDistricts && Array.isArray(nearbyDistricts) && nearbyDistricts.length > 0) {
        const closest = nearbyDistricts[0] as any
        
        // 25km'den yakınsa kabul et (şehir içi için daha dar sınır)
        if (closest.distance <= 25) {
          closestDistrict = closest.district_name
          closestProvince = closest.province_name
          
          console.log(`Database match found: ${closestProvince} - ${closestDistrict} (${closest.distance}km)`)
          
          return NextResponse.json({
            city: closestProvince,
            district: closestDistrict,
            method: 'database_coordinates',
            distance: Math.round(closest.distance * 100) / 100,
            coordinates: {
              lat: latitude,
              lng: longitude
            },
            debug: {
              nearbyOptions: nearbyDistricts.slice(0, 3).map((d: any) => ({
                name: `${d.province_name} - ${d.district_name}`,
                distance: Math.round(d.distance * 100) / 100
              }))
            }
          })
        }
      }
    } catch (dbError) {
      console.warn('Database coordinate lookup failed:', dbError)
      // Veritabanı hatası durumunda devam et
    }

    // Veritabanından bulamazsa OpenStreetMap'e geç
    const response = await fetch(
      `https://nominatim.openstreetmap.org/reverse?format=json&lat=${lat}&lon=${lng}&accept-language=tr&addressdetails=1&zoom=14`,
      {
        headers: {
          'User-Agent': 'RandeVur-Platform/1.0'
        }
      }
    )

    if (!response.ok) {
      throw new Error('Geocoding API hatası')
    }

    const data = await response.json()
    
    // Türkiye'deki il ve ilçe bilgilerini çıkar
    const address = data.address || {}
    
    // İl belirleme
    let city = address.state || 
               address.province || 
               address.region || 
               address.admin_level_4 || 
               address.admin_level_2 || 
               address.city ||
               'Bilinmeyen'

    // İlçe belirleme - mahalle seviyesini atla, ilçe seviyesinde kal
    let district = address.county || 
                   address.district || 
                   address.admin_level_6 || 
                   address.admin_level_5 || 
                   address.municipality || 
                   address.town ||
                   address.village ||
                   'Merkez'
    
    // Mahalle, semt gibi detay bilgileri ilçe olarak kullanma
    const neighborhoodTerms = [
      'mahalle', 'mahallesi', 'mah.', 'mh.',
      'neighborhood', 'neighbourhood', 'suburb',
      'quarter', 'sokak', 'bulvar', 'caddesi', 'cd.'
    ]
    
    // Eğer district mahalle gibi görünüyorsa, diğer alanları kontrol et
    const districtLower = district.toLowerCase()
    const seemsLikeNeighborhood = neighborhoodTerms.some(term => 
      districtLower.includes(term)
    )
    
    if (seemsLikeNeighborhood || district.includes('Mahallesi')) {
      // Mahalle olduğunu anlıyorsak, üst seviye alanları kontrol et
      district = address.city_district || 
                 address.borough || 
                 address.state_district ||
                 address.admin_level_4 ||
                 'Merkez'
    }

    // İl adını temizle ve standartlaştır
    city = city.replace(/\s+(Province|İli|Bölgesi|Region|Belediyesi)$/i, '').trim()
    
    // İlçe adını temizle ve standartlaştır
    district = district.replace(/\s+(İlçesi|District|County|Belediyesi|Municipality)$/i, '').trim()
    
    // Eğer OpenStreetMap'ten gelen sonuç veritabanındaki bir ile eşleşiyorsa
    // İlçeyi de kontrol et ve düzelt
    try {
      const provinceMatch = await prisma.province.findFirst({
        where: {
          name: {
            contains: city,
            mode: 'insensitive'
          }
        },
        include: {
          districts: true
        }
      })
      
      if (provinceMatch) {
        city = provinceMatch.name
        
        // İlçe adını da kontrol et ve düzelt
        const districtMatch = provinceMatch.districts.find(d => 
          d.name.toLowerCase().includes(district.toLowerCase()) ||
          district.toLowerCase().includes(d.name.toLowerCase())
        )
        
        if (districtMatch) {
          district = districtMatch.name
        } else if (district === 'Merkez' || district.toLowerCase() === city.toLowerCase()) {
          // Merkez ilçe varsa onu seç, yoksa en yakın koordinatı bul
          const merkezDistrict = provinceMatch.districts.find(d => 
            d.name.toLowerCase().includes('merkez') ||
            d.name.toLowerCase() === city.toLowerCase()
          )
          
          if (merkezDistrict) {
            district = merkezDistrict.name
          } else {
            // En yakın ilçeyi koordinat ile bul
            let minDistance = Infinity
            let nearestDistrict = null
            
            for (const d of provinceMatch.districts) {
              if (d.latitude && d.longitude) {
                const distance = calculateDistance(
                  latitude, longitude,
                  parseFloat(d.latitude), parseFloat(d.longitude)
                )
                if (distance < minDistance) {
                  minDistance = distance
                  nearestDistrict = d
                }
              }
            }
            
            if (nearestDistrict && minDistance <= 100) { // 100km sınırı
              district = nearestDistrict.name
            }
          }
        }
      }
    } catch (dbError) {
      console.warn('Database province/district lookup failed:', dbError)
    }

    return NextResponse.json({
      city,
      district,
      method: 'openstreetmap_with_db_correction',
      fullAddress: data.display_name || '',
      coordinates: {
        lat: latitude,
        lng: longitude
      },
      debug: {
        originalCity: address.state || address.province || address.city,
        originalDistrict: address.county || address.district,
        detectedFromFullAddress: data.display_name,
        addressLevels: {
          admin_level_2: address.admin_level_2,
          admin_level_4: address.admin_level_4,
          admin_level_5: address.admin_level_5,
          admin_level_6: address.admin_level_6,
          state: address.state,
          province: address.province,
          city: address.city,
          county: address.county,
          district: address.district,
          municipality: address.municipality,
          city_district: address.city_district,
          town: address.town,
          village: address.village,
          neighbourhood: address.neighbourhood,
          suburb: address.suburb,
          quarter: address.quarter
        },
        processedResult: {
          finalCity: city,
          finalDistrict: district,
          seemsLikeNeighborhood: neighborhoodTerms.some(term => 
            (address.county || address.district || '').toLowerCase().includes(term)
          )
        },
        allAddressFields: process.env.NODE_ENV === 'development' ? address : undefined
      }
    })

  } catch (error) {
    console.error('Reverse geocoding error:', error)
    
    return NextResponse.json(
      { 
        error: 'Konum bilgisi alınamadı',
        details: process.env.NODE_ENV === 'development' ? String(error) : undefined
      },
      { status: 500 }
    )
  }
}

// Haversine formülü - iki koordinat arasındaki mesafe (km)
function calculateDistance(lat1: number, lon1: number, lat2: number, lon2: number): number {
  const R = 6371 // Dünya'nın yarıçapı (km)
  const dLat = (lat2 - lat1) * Math.PI / 180
  const dLon = (lon2 - lon1) * Math.PI / 180
  const a = 
    Math.sin(dLat/2) * Math.sin(dLat/2) +
    Math.cos(lat1 * Math.PI / 180) * Math.cos(lat2 * Math.PI / 180) * 
    Math.sin(dLon/2) * Math.sin(dLon/2)
  const c = 2 * Math.atan2(Math.sqrt(a), Math.sqrt(1-a))
  return R * c
}
